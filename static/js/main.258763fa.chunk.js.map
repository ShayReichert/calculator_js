{"version":3,"sources":["components/Calculator.js","components/Display.js","components/KeysPad.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","handleButton","button","reset","handleDigit","handleOperator","calculate","handleDecimal","console","error","setState","stockNumber","result","digit","state","test","operator","operators","minus","includes","length","Math","round","eval","log","this","className","onClick","Component","Display","id","allButtons","name","displayName","KeysPad","map","item","index","key","e","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"y8CAIMA,W,0iBACF,oBAAYC,OAAQ,IAAD,sRACf,uBAAMA,OADS,MAUnBC,aAAe,SAAAC,GACX,OAAQA,GACJ,IAAK,IACD,MAAKC,QACL,MACJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,MAAKC,YAAYF,GACjB,MACJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,MAAKG,eAAeH,GACpB,MACJ,IAAK,IACD,MAAKI,YACL,MACJ,IAAK,IACD,MAAKC,gBACL,MACJ,QACIC,QAAQC,MAAM,WAxCP,MA6CnBN,MAAQ,WACJ,MAAKO,SAAS,CACVC,YAAa,IACbC,OAAQ,MAhDG,MAqDnBR,YAAc,SAAAS,GAAU,IACZF,EAAgB,MAAKG,MAArBH,YAEH,mBAAmBI,KAAKJ,IACzB,MAAKD,SAAS,CAEVC,YAA6B,MAAhBA,EAAA,UAAyBA,GAAzB,OAAuCE,GAAUA,KA3DvD,MAiEnBR,eAAiB,SAAAW,UACb,IAAMC,UAAY,CAAC,IAAK,IAAK,IAAK,KADT,YAEO,MAAKH,MAA7BH,YAFiB,YAEjBA,YAAaC,OAFI,YAEJA,OACfM,MAAQ,IAEV,UAAUH,KAAKJ,aAGXM,UAAUE,SAASR,YAAYA,YAAYS,OAAS,IAEnC,MAAbJ,SACA,MAAKN,SAAS,CACVC,YAAaK,WAETE,MAAMC,SAASR,YAAYA,YAAYS,OAAS,KACxD,MAAKV,SAAS,CACVC,YAAY,GAAD,OAAKA,aAAL,OAAmBK,YAMtC,MAAKN,SAAS,CACVC,YAAaK,SAEbJ,OAAQS,KAAKC,MAAwC,IAAlCC,KAAK,GAAD,OAAIX,QAAJ,OAAaD,eAA0B,MAMtE,MAAKD,SAAS,CACVC,YAAaK,SACbJ,OAAQD,eAlGD,MAwGnBL,UAAY,WACR,IAAMW,UAAY,CAAC,IAAK,IAAK,IAAK,KADpB,aAEkB,MAAKH,MAA7BH,YAFM,aAENA,YAAaC,OAFP,aAEOA,OAErB,GAAKK,UAAUE,SAASR,YAAYA,YAAYS,OAAS,IAOrD,OAAOZ,QAAQgB,IAAI,wBANnB,MAAKd,SAAS,CAEVC,YAAaU,KAAKC,MAAwC,IAAlCC,KAAK,GAAD,OAAIX,QAAJ,OAAaD,eAA0B,IACnEC,OAAQ,MAhHD,MAwHnBL,cAAgB,WAAO,IACXI,EAAgB,MAAKG,MAArBH,YAEHA,EAAYQ,SAAS,MACtB,MAAKT,SAAS,CACVC,YAAY,GAAD,OAAKA,EAAL,QA1HnB,MAAKG,MAAQ,CACTH,YAAa,IACbC,OAAQ,IALG,M,uSAkIT,IAAD,EAC2Ba,KAAKX,MAA7BH,EADH,EACGA,YAAaC,EADhB,EACgBA,OACrB,OACI,kEAAKc,UAAU,mBACX,kEAAKA,UAAU,wBACX,2DAAC,wCAAD,CAASd,OAAQA,EAAQD,YAAaA,IACtC,2DAAC,wCAAD,CAASgB,QAASF,KAAKxB,qB,YAzIlB2B,8CAgJV7B,kC,6BCpJf,oBAsBe8B,IApBC,SAAC7B,GAAW,IAEhBW,EAAwBX,EAAxBW,YAAaC,EAAWZ,EAAXY,OAErB,OACI,6BACI,yBAAKkB,GAAG,kBACJ,yBAAKA,GAAG,WACJ,4BAAKnB,EAAL,KACA,4BAAKC,Q,6ECTnBmB,EAAa,CACf,CAAEC,KAAM,IAAKC,YAAa,IAAKH,GAAI,SACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,UACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,YACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,SACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,SACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,QACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,YACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,QACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,QACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,OACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,OACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,OACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,OACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,SACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,UACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,QACnC,CAAEE,KAAM,IAAKC,YAAa,IAAKH,GAAI,YAGjCI,E,uKAEQ,IAAD,OAEL,OACI,yBAAKR,UAAU,UAEVK,EAAWI,KAAI,SAACC,EAAMC,GAEnB,OACI,4BAAQX,UAAU,UACdI,GAAIM,EAAKN,GACTQ,IAAKD,EACLL,KAAMI,EAAKJ,KACXL,QAAS,SAAAY,GAAC,OAAI,EAAKvC,MAAM2B,QAAQY,EAAEC,OAAOR,QACzCI,EAAKH,qB,GAfZL,aA2BPM,O,oMClCAO,E,uKARX,OACE,yBAAKf,UAAU,OACX,kBAAC3B,EAAA,EAAD,W,GALQ6B,aCQEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAGL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLD,QAAQC,MAAMA,EAAMiD,c","file":"static/js/main.258763fa.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Display from './Display'\nimport KeysPad from './KeysPad'\n\nclass Calculator extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            stockNumber: \"0\",\n            result: \"\"\n        }\n    }\n\n    // switch\n    handleButton = button => {\n        switch (button) {\n            case 'C':\n                this.reset();\n                break;\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n                this.handleDigit(button);\n                break;\n            case '+':\n            case '-':\n            case '*':\n            case '/':\n                this.handleOperator(button);\n                break;\n            case '=':\n                this.calculate();\n                break;\n            case '.':\n                this.handleDecimal();\n                break;\n            default:\n                console.error('Ooops');\n        }\n    }\n\n    // On key \"C\" pressed\n    reset = () => {\n        this.setState({\n            stockNumber: \"0\",\n            result: \"\",\n        })\n    }\n\n    // add digit\n    handleDigit = digit => {\n        const { stockNumber } = this.state\n        // don't start a number with zero \n        if (!/^[+\\-*/][0]{1,}$/.test(stockNumber)) {\n            this.setState({\n                // add digit only if the stockNumber is differente from 0\n                stockNumber: stockNumber !== '0' ? `${stockNumber}${digit}` : digit,\n            })\n        }\n    }\n\n    // handle operators\n    handleOperator = operator => {\n        const operators = [\"-\", \"+\", \"/\", \"*\"]\n        const { stockNumber, result } = this.state\n        const minus = \"-\"\n\n        if (/[+\\-*/]/.test(stockNumber)) {\n            // if the operator is the last thing in stockNumber, replace it\n\n            if (operators.includes(stockNumber[stockNumber.length - 1])) {\n\n                if (operator !== \"-\") {\n                    this.setState({\n                        stockNumber: operator\n                    })\n                } else if (!minus.includes(stockNumber[stockNumber.length - 1])) {\n                    this.setState({\n                        stockNumber: `${stockNumber}${operator}`\n                    })\n                }\n\n            } else {\n                // if the preview operator is followed by numbers : calculate the result and include the operator\n                this.setState({\n                    stockNumber: operator,\n                    // eslint-disable-next-line \n                    result: Math.round(eval(`${result}${stockNumber}`) * 10000) / 10000,\n                })\n            }\n\n        } else {\n            //there is no operators, calculate normaly\n            this.setState({\n                stockNumber: operator,\n                result: stockNumber\n            })\n        }\n\n    }\n\n    calculate = () => {\n        const operators = [\"-\", \"+\", \"/\", \"*\"]\n        const { stockNumber, result } = this.state\n        //calculate only if the stockNumber is NOT a operators.\n        if (!operators.includes(stockNumber[stockNumber.length - 1])) {\n            this.setState({\n                // eslint-disable-next-line \n                stockNumber: Math.round(eval(`${result}${stockNumber}`) * 10000) / 10000,\n                result: '',\n            })\n        } else {\n            return console.log(\"operation impossible\")\n        }\n    }\n\n    // add decimal point\n    handleDecimal = () => {\n        const { stockNumber } = this.state\n        // add point only if no point is already included\n        if (!stockNumber.includes(\".\")) {\n            this.setState({\n                stockNumber: `${stockNumber}.`\n            })\n        }\n    }\n\n    render() {\n        const { stockNumber, result } = this.state\n        return (\n            <div className=\"main-calculator\">\n                <div className=\"lightgrey-calculator\">\n                    <Display result={result} stockNumber={stockNumber} />\n                    <KeysPad onClick={this.handleButton} />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Calculator\n","import React from 'react'\n\nconst Display = (props) => {\n\n    const { stockNumber, result } = props\n\n    return (\n        <div>\n            <div id=\"display-shadow\">\n                <div id=\"display\">\n                    <h2>{stockNumber} </h2>\n                    <h1>{result}</h1>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\n\n\n\nexport default Display\n","import React, { Component } from 'react'\n\nconst allButtons = [\n    { name: \"C\", displayName: \"C\", id: \"clear\" },\n    { name: \"/\", displayName: \"/\", id: \"divide\" },\n    { name: \"*\", displayName: \"x\", id: \"multiply\" },\n    { name: \"7\", displayName: \"7\", id: \"seven\" },\n    { name: \"8\", displayName: \"8\", id: \"eight\" },\n    { name: \"9\", displayName: \"9\", id: \"nine\" },\n    { name: \"-\", displayName: \"-\", id: \"subtract\" },\n    { name: \"4\", displayName: \"4\", id: \"four\" },\n    { name: \"5\", displayName: \"5\", id: \"five\" },\n    { name: \"6\", displayName: \"6\", id: \"six\" },\n    { name: \"+\", displayName: \"+\", id: \"add\" },\n    { name: \"1\", displayName: \"1\", id: \"one\" },\n    { name: \"2\", displayName: \"2\", id: \"two\" },\n    { name: \"3\", displayName: \"3\", id: \"three\" },\n    { name: \"=\", displayName: \"=\", id: \"equals\" },\n    { name: \"0\", displayName: \"0\", id: \"zero\" },\n    { name: \".\", displayName: \".\", id: \"decimal\" },\n]\n\nclass KeysPad extends Component {\n\n    render() {\n\n        return (\n            <div className=\"button\">\n\n                {allButtons.map((item, index) => {\n\n                    return (\n                        <button className=\"buttons\"\n                            id={item.id}\n                            key={index}\n                            name={item.name}\n                            onClick={e => this.props.onClick(e.target.name)} >\n                            {item.displayName}\n                        </button>\n                    );\n                })}\n\n            </div>\n        )\n    \n    }\n\n}\n\nexport default KeysPad\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Calculator from './components/Calculator'\n\nclass App extends Component {\n  render() {\n\n    return (\n      <div className=\"App\">\n          <Calculator />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  // {/* </React.StrictMode>, */}\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}